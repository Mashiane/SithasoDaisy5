class SVGRenderer extends HTMLElement{constructor(){super(),this.eventListeners=new Map}static get observedAttributes(){return["data-src","width","height","fill","background","data-js","style","class"]}async connectedCallback(){await this.loadSVG()}async attributeChangedCallback(t,e,s){if(e!==s)try{"data-src"===t?await this.loadSVG():"data-js"===t?this.updateEventHandling():this.svgContent&&this.applyStyles(this.svgContent)}catch(t){}}async loadSVG(){const t=this.getAttribute("data-src");if(t)try{let e=localStorage.getItem(t);if(!e){const s=await fetch(t);if(!s.ok)throw new Error("Failed to fetch SVG (HTTP Error)");e=await s.text();try{localStorage.setItem(t,e)}catch(t){t.name}}let s=null;const n=(new DOMParser).parseFromString(e,"image/svg+xml");if(n.querySelector("parsererror")||(s=n.querySelector("svg")),!s){const t=document.createElement("div");t.innerHTML=e,s=t.querySelector("svg")}if(!s)throw new Error("Invalid SVG content");Array.from(this.attributes).forEach((t=>{"data-src"!==t.name&&null!==t.value&&void 0!==t.value&&s.setAttribute(t.name,t.value)})),SVGRenderer.observedAttributes.forEach((t=>{"data-src"===t||this.hasAttribute(t)||s.removeAttribute(t)})),this.applyStyles(s),this.replaceWith(s),this.svgContent=s,"enabled"===this.getAttribute("data-js")&&this.updateEventHandling()}catch(t){const e=document.createElement("div");e.style.color="red",t.message.includes("Failed to fetch SVG")?e.textContent="Error fetching SVG. Please check the URL or your connection.":t.message.includes("Invalid SVG content")?e.textContent="Failed to load SVG. It may be invalid.":e.textContent=`Unknown error: ${t.message}`,this.replaceWith(e)}}applyStyles(t){try{const e=this.getAttribute("width"),s=this.getAttribute("height"),n=this.getAttribute("fill"),r=this.getAttribute("background"),i=this.getAttribute("style"),a=this.getAttribute("class");if(null==e||isNaN(e)||t.setAttribute("width",e),null==s||isNaN(s)||t.setAttribute("height",s),null!=r&&(t.style.background=r),null!=a&&t.setAttribute("class",a),null!=n&&(t.style.fill=n,t.style.color=n,t.querySelectorAll("[fill]").forEach((t=>{t.setAttribute("fill",n)}))),null!=i){t.setAttribute("style",i);const e=i.match(/color\s*:\s*([^;]+);?/i);if(e){const s=e[1].trim();t.style.fill=s,t.style.color=s,t.querySelectorAll("[fill]").forEach((t=>{t.setAttribute("fill",s)}))}}}catch(t){}}updateEventHandling(){try{if(!this.svgContent)return;if(this.eventListeners.forEach(((t,e)=>{this.svgContent.removeEventListener(e,t)})),this.eventListeners.clear(),"enabled"===this.getAttribute("data-js")){["click","mouseover","mouseout","mousedown","mouseup"].forEach((t=>{const e=e=>{const s=new CustomEvent(`svg-${t}`,{detail:{originalEvent:e,svgElement:this.svgContent},bubbles:!0});this.svgContent.dispatchEvent(s)};this.svgContent.addEventListener(t,e),this.eventListeners.set(t,e)})),this.svgContent.style.cursor="pointer"}else this.svgContent.style.cursor="default",this.svgContent.style.pointerEvents="none"}catch(t){}}addStyle(t,e){try{this.svgContent&&(this.svgContent.style[t]=e)}catch(t){}}removeStyle(t){try{this.svgContent&&(this.svgContent.style[t]="")}catch(t){}}addClass(t){try{this.svgContent&&this.svgContent.classList.add(t)}catch(t){}}removeClass(t){try{this.svgContent&&this.svgContent.classList.remove(t)}catch(t){}}toggleClass(t){try{this.svgContent&&this.svgContent.classList.toggle(t)}catch(t){}}}customElements.define("svg-renderer",SVGRenderer);